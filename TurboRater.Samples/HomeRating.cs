using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Serialization;
using TurboRater.ApiClients.Imp;
using TurboRater.ApiClients.RateEngineApi;
using TurboRater.Insurance;
using TurboRater.Insurance.DataTransformation;
using TurboRater.Insurance.HO;

namespace TurboRater.Samples
{
  /// <summary>
  /// Samples relating to homeowner API rating.  Note, these calls use IMP Basic authentication.
  /// </summary>
  public class HomeRating
  {
    /// <summary>
    /// If true, the test sites and URLs will be used, otherwise production sites and URLs will be used.
    /// </summary>
    public virtual bool Test { get; set; }

    /// <summary>
    /// The IMP account ID used for calls to IMP.
    /// </summary>
    public virtual Guid ImpAccountId { get; set; }

    /// <summary>
    /// The Rate API access ID assigned to you by ITC.
    /// </summary>
    public virtual string RateApiAccessId { get; set; }

    /// <summary>
    /// The Rate API account name assigned to you by ITC.
    /// </summary>
    public virtual string RateApiAccountName { get; set; }

    /// <summary>
    /// The Rate API account number assigned to you by ITC.
    /// </summary>
    public virtual string RateApiAccountNumber { get; set; }

    /// <summary>
    /// The real-time account number assigned by ITC.
    /// </summary>
    public virtual string RateApiRealtimeAccountNumber { get; set; }

    /// <summary>
    /// Looks up homeowner quote IDs for a client by first and last name.
    /// </summary>    
    /// <param name="firstName">The first name of the client.</param>
    /// <param name="lastName">The ast name of the client.</param>
    /// <returns>Enumerable list of quote IDs belonging to the client.</returns>
    public virtual IEnumerable<int> SearchHomeownerQuotesByName(string firstName, string lastName)
    {
      var url = (Test ? ImpConstants.TestBaseUrl : ImpConstants.LiveBaseUrl) + "api";
      var impClient = new ApiClients.Imp.Default.Container(new Uri(url));
      impClient.SendingRequest2 += (sender, eventArgs) => ImpClient.SetClientHeadersOData(eventArgs.RequestMessage, null, ImpAccountId);

      var clients = impClient.Clients
        .Expand("HomePolicies")
        .Where(client => client.LastName == lastName && client.FirstName == firstName)
        .First();

      return clients.HomePolicies.Select(policy => policy.RecordId);
    }

    /// <summary>
    /// Returns a homeowner quote by ID.
    /// </summary>
    /// <param name="quoteId">The ID of the quote.</param>
    /// <returns>The loaded quote object.</returns>
    public virtual HOPolicy GetHomeownerQuoteById(int quoteId)
    {
      var impClient = new ImpClient() { BaseUrl = Test ? ImpConstants.TestBaseUrl : ImpConstants.LiveBaseUrl };
      var result = impClient.LoadPolicy(ImpAccountId, InsuranceLine.Homeowners, quoteId, BridgeContentType.Custom);
      return (HOPolicy)result.Policy;
    }

    /// <summary>
    /// Gets company information for a state, including company questions, company endorsements and company credits.
    /// </summary>
    /// <param name="state">The rating state.</param>
    /// <returns>A list of company information for the state.</returns>
    public virtual IEnumerable<CompanyInfo> GetHomeownerCompanyInfo(USState state)
    {
      var request = new CompanyInfoRequest()
      {
        AccessID = RateApiAccessId,
        AccountName = RateApiAccountName,
        AccountNumber = RateApiAccountNumber,        
        IncludeCompanyQuestions = true,
        State = ITCConstants.StateAbbreviations[(int)state],
        InsuranceLine = "HO",
        IncludeCompanyCredits = true,
        IncludeCompanyEndorsements = true,
        Type = "All",
      };

      var result = new List<ApiClients.RateEngineApi.CompanyQuestion>();
      var rateApiClient = new RateEngineApiClient() { AuthId = this.RateApiAccountNumber, AuthPassword = this.RateApiAccountNumber };
      rateApiClient.BaseUrl = Test ? RateEngineApiConstants.BaseUrlTest : RateEngineApiConstants.BaseUrlLive;
      return rateApiClient.GetCompanyInfo(request).CompanyInfoList;
    }

    /// <summary>
    /// Builds and sends a rate request to the homeowner rating API.
    /// </summary>
    /// <param name="policy">The policy to be rated.</param>
    /// <param name="customerId">The customer ID generated by you.</param>
    /// <param name="transactionId">The transaction ID generated by you.</param>
    /// <param name="state">The rating state of the quote.</param>
    /// <param name="carrierInformation">A list of carrier information objects.</param>
    /// <returns></returns>
    public virtual ITCRateEngineRequest SendHomeownerRateRequest(HOPolicy policy, string customerId, string transactionId, USState state, IEnumerable<CarrierInfo> carrierInformation)
    {
      var rateApiClient = new RateEngineApiClient() { AuthId = this.RateApiAccountNumber, AuthPassword = this.RateApiAccountNumber };
      rateApiClient.BaseUrl = Test ? RateEngineApiConstants.BaseUrlTest : RateEngineApiConstants.BaseUrlLive;

      var request = new ITCRateEngineRequest()
      {
        AccessID = RateApiAccessId,
        AccountName = RateApiAccountName,
        AccountNumber = RateApiAccountNumber,
        BumpLimits = RateEngineBumpingEnum.bBumpUp,
        CustomerID = customerId,
        EstimateTerm = true,
        InsuredFirstName = policy.Insured.FirstName,
        InsuredLastName = policy.Insured.LastName,
        InsuredMiddleName = string.Empty,
        LineOfInsurance = InsuranceLine.Homeowners,
        OnlyRespondWhenFinished = false,
        PolicyData = TransformationHelper.SerializePolicy(policy),
        RateState = ITCConstants.StateAbbreviations[(int)state],
        RealTimeAccountNumber = RateApiRealtimeAccountNumber,
        Test = true,
        TransactionID = transactionId,
        UseRequestCredentials = false,
        CarrierInformation = carrierInformation.ToList()
      };

      rateApiClient.RatePolicy(request);
      return request;
    }

    /// <summary>
    /// Clones a policy using serialization.
    /// </summary>
    /// <param name="policy">The policy to clone.</param>
    /// <param name="serializer">An optional already created serializer.  Creating the XML serializer 
    /// used to clone the policy is a slow process, so best to create a serializer ahead of time and cache it
    /// for use with this method.</param>
    /// <returns>The cloned policy.</returns>
    public HOPolicy ClonePolicy(HOPolicy policy, XmlSerializer serializer = null)
    {
      var policyData = Serializer.SerializeToXMLString(policy, new Type[] { typeof(PropertyPerson) }, serializer);
      return Serializer.DeserializeFromXMLString<HOPolicy>(policyData, new Type[] { typeof(PropertyPerson) }, serializer);
    }

    /// <summary>
    /// Takes a homeowner policy that was previously loaded, and clears all record IDs so a subsequent
    /// call to save the policy will save it as a new policy.
    /// </summary>
    /// <param name="policy"></param>
    public virtual void ClearRecordIdsForFreshSave(HOPolicy policy)
    {
      policy.RecordID = -1;
      policy.Quote.RecordID = -1;
      policy.Quote.PolicyLinkID = -1;
      policy.Quote.WindowsRecordID = -1;
      policy.Insured.RecordID = -1;
      policy.Insured.PolicyLinkID = -1;
      policy.InsuredLinkID = -1;
      policy.MailingAddress.RecordID = -1;
      policy.MailingAddress.PolicyLinkID = -1;
      policy.InsuredProperty.RecordID = -1;
      policy.InsuredProperty.PolicyLinkID = -1;
      policy.OtherInsured.RecordID = -1;
      policy.OtherInsured.PolicyLinkID = -1;
      policy.Discounts.RecordID = -1;
      policy.Discounts.PolicyLinkID = -1;
      policy.ISOEndorsements.RecordID = -1;
      policy.ISOEndorsements.PolicyLinkID = -1;
      policy.TXEndorsements.RecordID = -1;
      policy.TXEndorsements.PolicyLinkId = -1;
      policy.Quote.QuoteTemplate = false;
      policy.Insured.ProductID = ITCConvert.USStateToProductNumber(ITCConvert.StateAbbrevToEnum("CO")).ToString();
      policy.Quote.QuotedByFirstName = String.Empty;
      policy.Quote.QuotedByLastName = String.Empty;
      policy.Quote.LastQuotedByFirstName = String.Empty;
      policy.Quote.LastQuotedByLastName = String.Empty;

      if (policy.PropertyAddressSame)
      {
        policy.Insured.Address1 = policy.MailingAddress.Address1;
        policy.Insured.Address2 = policy.MailingAddress.Address2;
        policy.Insured.City = policy.MailingAddress.City;
        policy.Insured.State = policy.MailingAddress.State;
        policy.Insured.ZipCode = policy.MailingAddress.ZipCode;
        policy.Insured.County = policy.MailingAddress.County;
        policy.Insured.ProductID = ITCConvert.USStateToProductNumber(policy.MailingAddress.State).ToString();
      }
      else
      {
        policy.Insured.Address1 = policy.InsuredProperty.Address1;
        policy.Insured.Address2 = policy.InsuredProperty.Address2;
        policy.Insured.City = policy.InsuredProperty.City;
        policy.Insured.State = policy.InsuredProperty.State;
        policy.Insured.ZipCode = policy.InsuredProperty.ZipCode;
        policy.Insured.County = policy.InsuredProperty.County;
        policy.Insured.ProductID = ITCConvert.USStateToProductNumber(policy.InsuredProperty.State).ToString();
      }

      foreach (var prem in policy.MiscPremiums)
      {
        prem.RecordID = -1;
        prem.PolicyLinkID = -1;
      }
      foreach (var note in policy.Quote.Notes)
      {
        note.RecordID = -1;
        note.QuoteLinkID = -1;
      }
      foreach (var warning in policy.Warnings)
      {
        warning.RecordID = -1;
        warning.PolicyLinkID = -1;
      }
      foreach (var error in policy.Errors)
      {
        error.RecordID = -1;
        error.PolicyLinkID = -1;
      }
      foreach (var message in policy.DiscountMessages)
      {
        message.RecordID = -1;
        message.PolicyLinkID = -1;
      }
      foreach (var message in policy.SurchargeMessages)
      {
        message.RecordID = -1;
        message.PolicyLinkID = -1;
      }
      foreach (var property in policy.PersonalProperty)
      {
        property.RecordID = -1;
        property.PolicyLinkID = -1;
      }
      foreach (var watercraft in policy.Watercraft)
      {
        watercraft.RecordID = -1;
        watercraft.PolicyLinkID = -1;
      }
      foreach (var loss in policy.Losses)
      {
        loss.RecordID = -1;
        loss.PolicyLinkID = -1;
      }

    }

    /// <summary>
    /// Initializes a new HomeRating object with an IMP account ID.
    /// </summary>
    /// <param name="impAccountId">The IMP account ID used for calls to IMP.</param>
    /// <param name="rateApiAccessId">The Rate API access ID assigned to you by ITC.</param>
    /// <param name="rateApiAccountName">The Rate API account name assigned to you by ITC.</param>
    /// <param name="rateApiAccountNumber">The Rate API account number assigned to you by ITC.</param>
    /// <param name="rateApiRealtimeAccountNumber">The Rate API real-time account number assigned to you by ITC.</param>
    /// <param name="test">If true, the test sites and URLs will be used, otherwise production sites and URLs will be used.</param>
    public HomeRating(Guid impAccountId, string rateApiAccessId, string rateApiAccountName, string rateApiAccountNumber, 
      string rateApiRealtimeAccountNumber, bool test)
    {
      ImpAccountId = impAccountId;
      Test = test;
      RateApiAccessId = rateApiAccessId;
      RateApiAccountName = rateApiAccountName;
      RateApiAccountNumber = rateApiAccountNumber;
      RateApiRealtimeAccountNumber = rateApiRealtimeAccountNumber;
    }
  }
}
